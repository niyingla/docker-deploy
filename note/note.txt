
RUN 命令执行命令并创建新的镜像层，通常用于安装软件包
CMD 命令设置容器启动后默认执行的命令及其参数，
但CMD设置的命令能够被docker run命令后面的命令行参数替换
ENTRYPOINT 配置容器启动时的执行命令
（不会被忽略，一定会被执行，即使运行 docker run时指定了其他命令）

--kubenete查看当前系统错误
journalctl -f
--获取节点信息
kubectl get nodes
--查看各个pod运行状态
kubectl get pods -o wide
--查看lables为app=nginx各个pod运行状态
kubectl get pods -l app=nginx
--获取相信信息
kubectl describe deploy/pods/service 名字
--获取节点所有信息 json是格式
kubectl get pods nginx -o json
--查看部署实例
kubectl get deploy
--设置实例数
kubectl scale deploy 实例名 --replicas=4 分片数
--删除部署实例
kubectl delete deploy 实例名
--部署实例
kubectl run 实例名 --image=镜像地址/分支 --port=8080 指定端口
--更新部署实例镜像
kubectl set image deploy 实例名 容器名（默认 run运行 他们是一样的）
=镜像地址:分支
--查看更新实例镜像结果
kubectl rollout status deploy 实例名
--取消更新实例镜像
kubectl rollout undo deploy 实例名
--从配置文件创建 可以创建pod/deployment run命令会创建deployment
-- creat 创建的节点 只要删除才能再次creat
kubectl creat -f *.yaml
--创建测试代理
kubectl proxy
--访问测试代理
curl http://localhost:8001/api/vi/proxy/namespaces/default/pods/名字
--查看pod日志 -f 跟踪 podname通过 kubectl get deploy 得到全名
kubectl logs podname -f
-- 进入容器
kubectl exec -it podname bash
--配置文件修改应用
kubectl apply -f *.yaml
--通过kubeproxy暴露服务端口       暴露类型        容器端口
service端口（可用于cluster_ip+端口访问服务 cluster_ip要在容器内部访问）
还会随机分配一个node_port也可以 服务器ip+端口 访问服务
（可指定 kubuctl get service service端口映射后面）
还可以通过 podip+容器端口访问
kubectl expose deploy 实例名 --type="NodePort" --target-port=8080 --port=80
-- jk打包项目
-- -U 强制刷新本地仓库
-- pl 指定模块
-- 同时处理选定模块所依赖的模块
-- user-edge-service maven中模块得名字
mvn -U -pl user-edge-service -am clean package
-- 查看端口是否监听
netstat -ntlp|grep 端口
-- -n 指定命名空间 kube-system 是系统内部命名空间
kubectl -n kube-system ger svc

--提供服务方式 除了geteway需要直接对外采用nodePort提供服务,其他只用通过dns 服务名访问就好

附件pod配置文件详解 https://www.cnblogs.com/mafeng/p/11769712.html
